System.setProperty("file.encoding", "UTF-8")

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'

        classpath 'com.github.AnySoftKeyboard.AnySoftKeyboardTools:makedictionary:99bd3e6'
        classpath 'com.github.AnySoftKeyboard.AnySoftKeyboardTools:generatewordslist:99bd3e6'
        //classpath files('english_dictionary/generatewordslist-1.0-SNAPSHOT.jar')
        classpath 'org.jsoup:jsoup:1.9.1'

        classpath 'com.github.Triple-T:gradle-play-publisher:8cda31a5d0e3c4f2d7f47ffde6fc3b370e59dd8a'
    }
}

apply plugin: 'checkstyle'
apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.0'

    defaultConfig {
        applicationId "com.anysoftkeyboard.languagepack.languagepack"
        minSdkVersion 7
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            storeFile file("/tmp/language_pack.keystore")
            storePassword System.getenv("PACK_KEYSTORE_PASSWORD")
            keyAlias System.getenv("PACK_KEYSTORE_ALIAS")
            keyPassword System.getenv("PACK_KEYSTORE_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            debuggable false

            minifyEnabled false
        }
    }
}

play {
    track = 'alpha'
    serviceAccountEmail = System.getenv("PUBLISH_APK_SERVICE_ACCOUNT_EMAIL")
    pk12File = file('/tmp/apk_upload_key.p12')
    uploadImages = false
}

task parseTextInputFiles(type: com.anysoftkeyboard.tools.generatewordslist.GenerateWordsListTask) {
    inputFiles new File(project.getProjectDir(), "dictionary/NY_STATE_ASSEMBLY_TRANSCRIPT_20120621.txt"),
                //Download the archive from https://dumps.wikimedia.org/other/static_html_dumps/current/simple/
                new File(project.getProjectDir(), "dictionary/First_English_Civil_War_Wikipedia.htm")
    outputWordsListFile new File(project.getProjectDir(), "dictionary/words_from_texts.xml")
}

//another option is to download the words-list from AOSP at https://android.googlesource.com/platform/packages/inputmethods/LatinIME/+/master/dictionaries/
//make sure that you are using an unzipped file. The XX_wordlist.combined file should be a plain text file.
task parseAospForEnglishDictionary(type: com.anysoftkeyboard.tools.generatewordslist.GenerateWordsListFromAOSPTask) {
    inputFile new File(project.getProjectDir(), "dictionary/aosp_en_wordlist.combined")
    outputWordsListFile new File(project.getProjectDir(), "dictionary/words_from_aosp.xml")
    maxWordsInList 300000
}

task mergeAllWordLists(type: com.anysoftkeyboard.tools.generatewordslist.MergeWordsListTask) {
    dependsOn parseTextInputFiles

    inputWordsListFiles = [
            new File(project.getProjectDir(), "dictionary/words_from_texts.xml"),
            new File(project.getProjectDir(), "dictionary/popular_websites_words.xml"),//website I use most
    ] as File[]
    outputWordsListFile new File(project.getProjectDir(), "dictionary/words_merged.xml")
    maxWordsInList 100000
}

task makeDictionary(type: com.anysoftkeyboard.tools.makedictionary.MakeDictionaryTask) {
    dependsOn mergeAllWordLists
    inputWordsListFile new File(project.getProjectDir(), "dictionary/words_merged.xml")
}

afterEvaluate { proj ->
    proj.tasks.all { task ->
        if (task.name.startsWith('generate') && task.name.endsWith('BuildConfig')) {
            task.dependsOn makeDictionary
        }
    }
}

dependencies {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
    compile 'com.github.AnySoftKeyboard:AnySoftKeyboard-API:1.9.0'
}

task checkstyle(type: Checkstyle) {
    configFile file("${projectDir}/checkstyle/checkstyle.xml")
    source 'src'
    classpath = files()
}

