import java.util.stream.Stream
import java.nio.file.Files

System.setProperty("file.encoding", "UTF-8")

def logFile = new File(buildDir.absoluteFile,"build-logging/build-log-${System.currentTimeMillis()}.log")
gradle.addBuildListener(new BuildLogger(logFile))

buildscript {
    repositories {
        google()
        mavenLocal()
        maven { url 'https://repo1.maven.org/maven2' }
//        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.13.0'
        classpath 'com.github.triplet.gradle:play-publisher:3.7.0'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:4.3.0'
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.9.3'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:7.2.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:2.2.0'
    }
}

allprojects {
    repositories {
        google()
        mavenLocal()
        gradlePluginPortal()
        maven { url 'https://repo1.maven.org/maven2' }
//        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

apply from: "${rootDir}/gradle/root_all_projects_ext.gradle"
apply from: "${rootDir}/gradle/fdroid_yaml_output.gradle"

// Clean task
def cleanOthers = tasks.register("cleanOthers", Delete) {
    delete buildDir
    logFile.parentFile.listFiles().each {
        if (it != null && it.absolutePath != logFile.absolutePath) {
            delete it
        }
    }

    Stream<Path> files = Files.walk(rootDir.toPath())
    files.sorted(Comparator.reverseOrder())
            .map { it.toFile() }
            .filter { it.name == 'beta.txt' || it.name == 'production.txt' }
            .forEach { it.deleteOnExit() }
    files.close()
}

tasks.register('clean').configure({
    it.finalizedBy(cleanOthers)
})

// ====== Kotlin/Java JVM target and remove -Werror ======
subprojects {
    // Kotlin
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "17"
            allWarningsAsErrors = false
        }
    }

    // Java
    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17

        // Remove -Werror to avoid compilation failing due to warnings
        options.compilerArgs.removeAll { it == "-Werror" }
    }
}
