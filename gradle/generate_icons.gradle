subprojects {
    afterEvaluate { project ->
        def generateIconsTask = task generateLanguagePackIcons

        if (project.plugins.hasPlugin('com.android.library') && name != "base") {
            [['xxxhdpi', 96, 80], ['xxhdpi', 72, 62], ['xhdpi', 48, 40], ['hdpi', 36, 32], ['mdpi', 24, 22]].each { dimens ->
                def statusIcon = task "generateStatusIcon_${dimens[0]}"(type: Exec) {
                    commandLine "${rootDir.absolutePath}/scripts/generate_status_icon.sh", project.ext.status_icon_text, "${dimens[1]}", "${dimens[2]}", "${projectDir.absolutePath}/src/main/res/drawable-${dimens[0]}"
                }

                generateIconsTask.dependsOn.add(statusIcon)
            }
        }

        if (project.plugins.hasPlugin('com.android.application')) {
            def imageAssetsFolder = new File(new File(rootDir, "StoreStuff"), "assets")
            if (!imageAssetsFolder.exists()) {
                throw new IllegalStateException("store assets folder '${imageAssetsFolder.absolutePath} does not exist!")
            }

            def launcherAssetsDir = "${imageAssetsFolder.absolutePath}/launcher-base"
            [['xxxhdpi', 48, 24], ['xxhdpi', 36, 20], ['xhdpi', 24, 14], ['hdpi', 18, 10], ['mdpi', 12, 6]].each { dimens ->
                def convert = task "generateLauncherIcon_${dimens[0]}"(type: Exec) {
                    commandLine "${launcherAssetsDir}/generate.sh", projectDir.absolutePath, buildDir.absolutePath, "${dimens[0]}", "${dimens[1]}", "${dimens[2]}", launcherAssetsDir
                }

                generateIconsTask.dependsOn.add(convert)
            }

            def generateLogoTask = task generateStoreLogoIcon(type: Exec) {
                commandLine "${imageAssetsFolder.absolutePath}/logo-base/generate.sh", projectDir.absolutePath, buildDir.absolutePath, "${imageAssetsFolder.absolutePath}/logo-base"
            }

            generateIconsTask.dependsOn.add(generateLogoTask)
        }
    }
}