import net.evendanan.versiongenerator.generators.EnvBuildVersionGenerator
import net.evendanan.versiongenerator.generators.GitBuildVersionGenerator
import net.evendanan.versiongenerator.generators.StaticVersionGenerator

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.github.menny:GradleVersion:0.0.4'
        classpath 'com.github.AnySoftKeyboard.AnySoftKeyboardTools:makedictionary:bebd3a85d51f7d6c514099594c583eb40b58eb8a'
        classpath 'com.github.AnySoftKeyboard.AnySoftKeyboardTools:generatewordslist:bebd3a85d51f7d6c514099594c583eb40b58eb8a'
        classpath 'org.jsoup:jsoup:1.9.1'

        classpath 'com.github.Triple-T:gradle-play-publisher:8cda31a5d0e3c4f2d7f47ffde6fc3b370e59dd8a'
    }
}

apply plugin: 'net.evendanan.versiongenerator'

def generators = [
        new net.evendanan.versiongenerator.generators.EnvBuildVersionGenerator.CircleCi(0, 0),
        new net.evendanan.versiongenerator.generators.GitBuildVersionGenerator(0, 0),
        new net.evendanan.versiongenerator.generators.StaticVersionGenerator()
]

def versionData = versionGenerator.generateVersion(3, 0, 0, generators)


subprojects {
    afterEvaluate { project ->
        def languageName = project.parent.name

        if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')) {
            project.android {
                compileSdkVersion 28
                buildToolsVersion '28.0.3'

                defaultConfig {
                    minSdkVersion 9
                    targetSdkVersion 28
                    versionCode versionData.versionCode
                    versionName versionData.versionName
                }
            }
        }

        if (project.plugins.hasPlugin('com.android.application')) {
            project.android {
                setProperty("archivesBaseName", "ASKLangPack-${languageName}-${versionData.versionCode}")
                defaultConfig {
                    applicationId "com.anysoftkeyboard.languagepack.${languageName}"

                    println("Binary ${path} for ${applicationId} will produce APK ${project.archivesBaseName}")
                }

                signingConfigs {
                    release {
                        storeFile file("/tmp/language_pack.keystore")
                        storePassword System.getenv("PACK_KEYSTORE_PASSWORD")
                        keyAlias System.getenv("PACK_KEYSTORE_ALIAS")
                        keyPassword System.getenv("PACK_KEYSTORE_KEY_PASSWORD")
                    }
                }

                buildTypes {
                    release {
                        signingConfig signingConfigs.release
                        zipAlignEnabled true
                        debuggable false

                        minifyEnabled false
                    }
                }
            }
        }
    }

    dependencies {
        repositories {
            google()
            jcenter()
            maven { url "https://jitpack.io" }
        }
    }
}