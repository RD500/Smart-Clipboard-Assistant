machine:
  java:
    version: oraclejdk8
  services:
    - docker
  environment:
      CODECOV_TOKEN: 1a4cd171-2784-4f48-8a62-0b7ec31e6d7e
      COV_REPORT_LOCATION: app/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml
      DOCKER_IMAGE_NAME: menny/android_ndk
      DOCKER_IMAGE_VERSION: 1.6.1a
      DOCKER_IMAGE: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}
      DOCKER_MOUNTS: -v ${HOME}/${CIRCLE_PROJECT_REPONAME}:/opt/workspace -v ${HOME}/.gradle:/root/.gradle -v ${HOME}/.m2:/root/.m2 -v ${HOME}/android_sdk_licenses:/opt/android-sdk-linux/licenses
      DOCKER_ARGS: --rm --name workspace --env-file ${HOME}/env.list

dependencies:
  cache_directories:
    - "~/docker"
    - "~/.gradle"
    - "~/.m2"
  override:
    - mkdir -p ~/.gradle
    - mkdir -p ~/.m2
    # creating an env file from host into Docker
    - printenv | grep -Ev '^(PATH|ANDROID|JAVA|PWD|SHELL|TERM|LANG|SSH|HOME|_)' > ${HOME}/env.list
    # setting up docker and its initial state
    - ${HOME}/${CIRCLE_PROJECT_REPONAME}/scripts/circleci_docker_image_cache.sh
    - docker run ${DOCKER_ARGS} ${DOCKER_MOUNTS} ${DOCKER_IMAGE} /opt/workspace/scripts/ci_setup.sh

compile:
  override:
    - docker run ${DOCKER_ARGS} ${DOCKER_MOUNTS} ${DOCKER_IMAGE} /opt/workspace/scripts/ci_assemble.sh
  post:
    - mkdir -p $CIRCLE_ARTIFACTS/apks/
    - cp app/build/outputs/apk/*.apk $CIRCLE_ARTIFACTS/apks/

test:
  override:
    #ensuring parallel is setup correctly.
    - if [[ "${CIRCLE_NODE_TOTAL}" != "2" ]]; then exit 1; fi
    - case $CIRCLE_NODE_INDEX in 0) docker run ${DOCKER_ARGS} ${DOCKER_MOUNTS} ${DOCKER_IMAGE} /opt/workspace/scripts/ci_check.sh ;; 1) docker run ${DOCKER_ARGS} ${DOCKER_MOUNTS} ${DOCKER_IMAGE} /opt/workspace/scripts/ci_test.sh ;; esac:
        parallel: true
  post:
    - if [[ "${CIRCLE_NODE_INDEX}" == "0" ]]; then mkdir -p $CIRCLE_ARTIFACTS/lint/app && cp app/build/outputs/lint* $CIRCLE_ARTIFACTS/lint/app/; fi
    - if [[ "${CIRCLE_NODE_INDEX}" == "0" ]]; then mkdir -p $CIRCLE_ARTIFACTS/lint/base && cp base/build/outputs/lint* $CIRCLE_ARTIFACTS/lint/base/; fi
    - if [[ "${CIRCLE_NODE_INDEX}" == "0" ]]; then mkdir -p $CIRCLE_ARTIFACTS/lint/jnidictionaryv1 && cp jnidictionaryv1/build/outputs/lint* $CIRCLE_ARTIFACTS/lint/jnidictionaryv1/; fi
    - if [[ "${CIRCLE_NODE_INDEX}" == "0" ]]; then mkdir -p $CIRCLE_ARTIFACTS/lint/jnidictionaryv2 && cp jnidictionaryv2/build/outputs/lint* $CIRCLE_ARTIFACTS/lint/jnidictionaryv2/; fi
    - if [[ "${CIRCLE_NODE_INDEX}" == "0" ]]; then mkdir -p $CIRCLE_ARTIFACTS/lint/nextword && cp nextword/build/outputs/lint* $CIRCLE_ARTIFACTS/lint/nextword/; fi
    - if [[ "${CIRCLE_NODE_INDEX}" == "1" ]]; then mkdir -p $CIRCLE_ARTIFACTS/tests/app && cp -r app/build/reports/tests $CIRCLE_ARTIFACTS/tests/app; fi
    # letting circleci know about the test results
    - if [[ "${CIRCLE_NODE_INDEX}" == "1" ]]; then mkdir -p $CIRCLE_TEST_REPORTS/junit/ && cp -r app/build/test-results/testDebugUnitTest/debug/*.xml $CIRCLE_TEST_REPORTS/junit/; fi
    # posts code-coverage to codecov.io
    - if [[ -f $COV_REPORT_LOCATION ]]; then ./scripts/ci_binaries/codecov.sh -X gcov -X coveragepy -f $COV_REPORT_LOCATION; fi

deployment:
  staging:
    branch: master
    owner: AnySoftKeyboard
    commands:
      - docker run ${DOCKER_ARGS} ${DOCKER_MOUNTS} ${DOCKER_IMAGE} /opt/workspace/scripts/ci_deploy.sh $KEYSTORE_FILE_URL $PUBLISH_CERT_FILE_URL
      - cp app/build/outputs/apk/*.apk $CIRCLE_ARTIFACTS/apks/
      - cp app/build/outputs/mapping/canary/mapping.txt $CIRCLE_ARTIFACTS/apks/ || true
      - cp app/build/outputs/mapping/release/mapping.txt $CIRCLE_ARTIFACTS/apks/ || true
